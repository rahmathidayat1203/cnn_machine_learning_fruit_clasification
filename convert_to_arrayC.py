import os

def convert_tflite_to_arduino_header(tflite_model_path, header_file_path, variable_name):
    # Read the TFLite model file
    with open(tflite_model_path, 'rb') as file:
        tflite_model = file.read()
    
    # Convert to C array
    c_array = ', '.join([f'0x{byte:02x}' for byte in tflite_model])
    
    # Create the header file content
    header_content = f"""
// This file is automatically generated. Do not edit.
#ifndef {variable_name.upper()}_H
#define {variable_name.upper()}_H

#include <stdint.h>

// Model data
const unsigned char {variable_name}[] = {{{c_array}}};
const unsigned int {variable_name}_len = {len(tflite_model)};

#endif // {variable_name.upper()}_H
"""
    
    # Write the header file
    with open(header_file_path, 'w') as file:
        file.write(header_content)

    print(f"Conversion complete. Header file saved as {header_file_path}")
    print(f"Model size: {len(tflite_model)} bytes")

# Example usage
tflite_model_path = 'model.tflite'
header_file_path = 'model_data.h'
variable_name = 'g_model'

convert_tflite_to_arduino_header(tflite_model_path, header_file_path, variable_name)